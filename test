As the RiskLab Model Services chapter lead, I defined visionary product roadmaps and oversee concrete implementation in optomizing Model development to production lifecycle for significant cost reduction. those efforts can be summarized into 3 categories: Model Enviorment, Data Access and Code management.
Model Enviorment: 
⦁	Introduction of compainon production container image to RiskLab development enviorment to reduce enviorment induced production incidents.
As nearly one third of production issues are casused by  enviorment inconsistency between development and production. I enforced the policy Risklab to release versioned AKS and Databricks IT companion container image for every RiskLab model development enviorment to certify the 100% likeness for operating system, compiler and depdendent libraries. Those compainon image are then used as the base for IT enviorment to run production model, which in turns significantly brought down the number of production incidents.
⦁	Databricks Container Services (DCS) curation for Group Function for simplified model packaing and deployment.
Deploying Python and R Model artifacts to Azure Databrick is currently manual and error prone as it requires significant DevOps expertise to setup customized deployment scripts. Working in conjunction with Risk CTO and Big Data team, I have worked since 2021 to resolved all DCS curation issues and gained exception approval for Risk IT usage. RiskLab has also completed PoC for end to end DCS deployment pipeline, and we shall see significant model productionization simplification when it rolls out to all Risk and Finance models in 2023. 
⦁	Databricks Rental system for extra big data model development up to 200 nodes per development workspace
To enable extra big data model development in RiskLab, I have launched a new product offering "Databricks Rental" in 2022. RiskLab now hosts the largest Databricks workspace in UBS with 1000 IPs. the system has a self service CLI which allows methodolgoy user to create/share custom clusters on demand, and additional CLI for interactive model development and job submission and as well as cost and billing management capabilities. We have seen large models being developed using up to 200 nodes cluster producing 100 GB+ model result.  
⦁	"Enviorment as code" for streamlined enviorment deployment with linerage
To further streamline the Model development enviorment lineage for better maintainbility, We hav built CICD pipeline that allowing versioned RiskLab container enviorment to be defined as code in GitLab, and to be auto deployed to different methodology organization through configuration. 
Data Access
⦁	Introduction of the concept "Lab authetication API" for strategic Data Hubs for better Lab data access security management
Most strategic Data Hubs (MEG, ScenarioHub, MPT) only supports data access API for system users such as Azure SP, which has elvated prilivedges that can not be given to Human methodology in a Lab enviorment. RiskLab have colloborated with all strategic Data Hubs and developed the Lab access APIs based on individual's Azure AAD group authentication, allowing Human user to request BBS right for restricted data hub access, such as only providing Read Only prilvedges to MEG production tenants for Lab users. 
⦁	Model Data Sandbox sotrage eco-system and Lexiker unstrucutred data data access API to support unstructured Sandbox datasets for model development 
Around 40% of data access needs in a Lab enviorment is the ability for methodology to experiment with data (both structured and unstructed). I have design and launched the RiskLab prodcut: Model Sandbox Tenant (MDS) and unstrucuted data access API named Lexiker API. MDS is used to facilicate the storage and goverenance of the Sandbox data. and Lexiker API provides methodology friendly API to hide underlying technical complexity.
⦁	Seperation of Model logic to Data Access layer to enable faster model development.
In order for Methodology to generate production ready model code in RiskLab with little IT data setup dependency, I have collobrated with MEG to push out the concept of Data Access Plug-ins through configuration, allowing the methodology and IT to switch the model data access requirements between IT MEG tenant datasets and Risklab provided sandbox datasets. It drastically increase the speed of model development as it cut depdendency to data hub onboarding of high qulaity data, and this approach is instrumental in CCAR model cloud migration. 
⦁	Machine Learning Data Pipeline though DVC and Iterative API to better managment of ML experiment data and tracking
In order to better manage Machine Learning experiment managements, I have collobrated with ADA and GCRG in piloting model ML experiment data mangaement through DVC and Iteative pipeline, the good result has rolled into the a versioning fundation in RiskLab Model Data Sandbox product for better managing the unstrcuted dataset versioning and tracking.  
Code Management
⦁	Python a R Model Task API owner with methdology friendly interfaces, and model task template for differnt model development appraoches. 
Risklab maintains the Python and R MEG task library pacakage, and provides additional methodology friendly API, allowing model logic definiton either in an object oriented classes, or as Juypter Lab function block. In addition, we have model sample template for different model development appraoches: such as buidling entire model using Spark, convert Spark to Panda / R Dataframe. or mixture of user defined function in panda and R, with data filtering in spark. Those unbiased choices allowing methodology with diffrent preferences and styles to quickly get onboarded. 
⦁	Common Gitlab CICD baseline for model artifact build to conslidate diverse DevOps prcoess into a sinfle maintainble process for significant cost reduction. 
As more model are onboarded to use RiskLab maitnained Task API, and RiskLab supplied production companion images. RiskLab is able to produce a common CICD baseline definition that can be shared to all vertical model stream to their production model artifact creation. This consolidation would significantly reduce the resoures required for the DevOps engineering on the release pipeline, and ultimately allowing methodology to self service generating production ready model artifact. 
⦁	Define new process to enable a Git based model submission between methodology and model validation for better linerage and tracking
In conjunction with MRMC business lead, I have defined a new MRMC submission workflow based on GIT to support diverse requirements between different methodology and MRMC sub divisions. The processes allowing MRMC to have different choice to reference, fork, or shallow fork methodology git branches and the abilty to provide feedbacks. 
⦁	Machine Learning Model Repositry evaluation and identify the gap within UBS for better managing ML model artifacts. 
In conjunction to the Group Function Machine learning Guild, I have taken the initiative to evaluate different options for a Machine Learning model repository suitable for UBS internal use. RiskLab has taken the initiaitive to support a PoC ready ML Flow, and compares its functionaility with one provided by Azure Machine Learning, Databricks and Domino DataLabs. 
